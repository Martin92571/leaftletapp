{"version":3,"sources":["Map.jsx","App.js","serviceWorker.js","index.js"],"names":["Map","mapStyle","mapType","weight","mapTypeColor","fillColor","opacity","stroke","color","dashArray","fillOpacity","whenClicked","e","state","county","url","console","log","target","feature","properties","STATE","undefined","COUNTY","axios","defaults","headers","post","get","then","res","census","data","HtmlRender","i","length","L","popup","setLatLng","latlng","setContent","openOn","map","onEachFeature","layer","on","click","usmap","tileLayer","attribution","this","center","zoom","layers","geoJSON","County","features","style","addTo","baseMaps","overlayMaps","Congressional","States","Usoutline","control","id","React","Component","App","markersData","latLng","lat","lng","title","addMarker","lastMarker","setState","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c0045ff.chunk.js","sourcesContent":["import React from \"react\";\nimport L from \"leaflet\";\nimport * as Usoutline from \"./us_outline.json\"\nimport * as States from \"./states.json\";\nimport * as County from \"./county.json\";\nimport * as Congressional from \"./congressional.json\";\nimport axios from 'axios';\n\n\n\n\nclass Map extends React.Component {\n\n  mapStyle=(mapType,weight)=> {\n  \n    let mapTypeColor;\n    switch(mapType){\n\n       case \"USA\":\n       mapTypeColor=\"#8dd3c7\";\n       break;    \n       case \"state\":\n       mapTypeColor='#7fc97f';\n       break;\n       case \"county\":\n       mapTypeColor='#bebada';\n       break;\n       case \"congressional\":\n       mapTypeColor='#FD8D3C';\n       break;\n       default :\n       mapTypeColor='#FFF';\n      \n         \n      \n      \n\n    }\n\n    return {\n     fillColor: mapTypeColor,\n      weight: weight,\n      opacity: 1,\n      stroke: true,\n      color:mapTypeColor,\n      dashArray: '2',\n      fillOpacity: 0.2\n    };\n  }\n\n  whenClicked=(e) =>{\n    // e = event\n    console.log(\"jkdlfhdsjlhfjds\",e.target.feature)\n    let state,county,url;\n    state=e.target.feature.properties.STATE;\n    if(e.target.feature.properties.COUNTY!==undefined){\n      county=e.target.feature.properties.COUNTY;\n      \n    url=`https://api.census.gov/data/2013/language?get=EST,LAN7,LANLABEL,NAME&for=county:${county}&in=state:${state}&key=c6b213357c951f788c3eb1916c6d718c59b55a8d`\n    }else{\n\n    url=`https://api.census.gov/data/2013/language?get=EST,LAN7,LANLABEL,NAME&for=state:${state}&key=c6b213357c951f788c3eb1916c6d718c59b55a8d`\n    \n    }\n   \n    axios.defaults.headers.post['Content-Type'] = 'application/json';\n\n    axios.get(url)\n   \n    .then(res => {\n      const census= res.data;\n      let HtmlRender='<div>No Languages Results Found!</div>'\n      if(res.data!==\"\"){\n      \n      HtmlRender=\"<div>\";\n      for(let i=0;i<census.length;i++){\n        if(i!==0){\n         HtmlRender+=`<ol><li>EST Population:${census[i][0]}</li>\n         <li>LAN7:${census[i][1]}</li>\n         <li>LANLABEL:${census[i][2]}</li>\n         <li>NAME:${census[i][3]}</li>\n         <li>LOCATION:${census[i][4]}</li>\n         </ol>\n         <hr>\n         `\n        }\n      }\n      HtmlRender+=\"</div>\"\n    }\n      let popup = L.popup()\n    .setLatLng(e.latlng)\n    .setContent(HtmlRender)\n    .openOn(this.map);\n   \n    \n  }) \n   \n  }\n  \n onEachFeature=(feature, layer)=>{\n      //bind click\n      \n      layer.on({\n          click: this.whenClicked\n      });\n  }\n \n\n  componentDidMount() {\n    // create map\n    let usmap=L.tileLayer(\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\", {\n      attribution:\n        '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n    })\n\n    this.map = L.map(\"map\", {\n      center: [39.73, -104.99],\n      zoom: 4,\n      layers: [usmap]\n      \n    });\n\n    // add layer\n   \n    let county= L.geoJSON(County.default.features,{style:this.mapStyle(\"county\",2),onEachFeature: this.onEachFeature}).addTo(this.map)\n    let congressional= L.geoJSON(Congressional.default.features,{style:this.mapStyle(\"congressional\",2)}).addTo(this.map)\n    let state= L.geoJSON(States.default.features,{style:this.mapStyle(\"state\",2), onEachFeature: this.onEachFeature}).addTo(this.map)\n    let country=L.geoJSON(Usoutline.default.features,{style:this.mapStyle(\"USA\",4)}).addTo(this.map)\n    let baseMaps = {\n      \"US\": usmap,\n  };\n  \n  let overlayMaps = {\n      \"Congressional\":congressional,\n      \"County\":county,\n      \"State\":state,\n      \"Country\": country,\n  };\n  \n  // initialize up the L.control.layers\n  L.control.layers(baseMaps, overlayMaps).addTo(this.map);\n   \n  }\n  componentDidUpdate() {\n    // check if data has changed\n   \n  }\n  render() {\n   \n    return <div id=\"map\"/>;\n  }\n}\n\nexport default Map;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Map from './Map';\n\nclass App extends React.Component {\n  state = {\n    markersData: [\n      { latLng: { lat: 49.8419, lng: 24.0315 }, title: 1 }\n    ]\n  };\n  addMarker = () => {\n    const { markersData } = this.state;\n    const lastMarker = markersData[markersData.length - 1];\n\n    this.setState({\n      markersData: [\n        ...markersData,\n        {\n          title: +lastMarker.title + 1,\n          latLng: {\n            lat: lastMarker.latLng.lat + 0.0001,\n            lng: lastMarker.latLng.lng + 0.0001,\n          }\n        }\n      ]\n    });\n  };\n  render() {\n    const { markersData } = this.state;\n    return (\n      <div className=\"App\">\n        <Map markersData={markersData} />\n               \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}