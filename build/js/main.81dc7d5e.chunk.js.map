{"version":3,"sources":["Map.jsx","App.js","serviceWorker.js","index.js"],"names":["Map","mapStyle","mapType","weight","mapTypeColor","fillColor","opacity","stroke","color","dashArray","fillOpacity","whenClicked","e","state","county","url","console","log","target","feature","properties","STATE","undefined","COUNTY","axios","defaults","headers","post","get","then","res","census","data","HtmlRender","i","length","L","popup","setLatLng","latlng","setContent","openOn","map","onEachFeature","layer","on","click","usmap","tileLayer","attribution","this","center","zoom","layers","geoJSON","County","features","style","addTo","baseMaps","overlayMaps","Congressional","States","Usoutline","control","id","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4wzzWAyJeA,E,2MA5IbC,SAAS,SAACC,EAAQC,GAEhB,IAAIC,EACJ,OAAOF,GAEJ,IAAK,MACLE,EAAa,UACb,MACA,IAAK,QACLA,EAAa,UACb,MACA,IAAK,SACLA,EAAa,UACb,MACA,IAAK,gBACLA,EAAa,UACb,MACA,QACAA,EAAa,OAQhB,MAAO,CACNC,UAAWD,EACVD,OAAQA,EACRG,QAAS,EACTC,QAAQ,EACRC,MAAMJ,EACNK,UAAW,IACXC,YAAa,K,EAIjBC,YAAY,SAACC,GAGX,IAAIC,EAAMC,EAAOC,EADjBC,QAAQC,IAAI,kBAAkBL,EAAEM,OAAOC,SAEvCN,EAAMD,EAAEM,OAAOC,QAAQC,WAAWC,WACMC,IAArCV,EAAEM,OAAOC,QAAQC,WAAWG,QAC7BT,EAAOF,EAAEM,OAAOC,QAAQC,WAAWG,OAErCR,EAAI,mFAAD,OAAoFD,EAApF,qBAAuGD,EAAvG,kDAGHE,EAAI,kFAAD,OAAmFF,EAAnF,iDAIHW,IAAMC,SAASC,QAAQC,KAAK,gBAAkB,mBAE9CH,IAAMI,IAAIb,GAETc,MAAK,SAAAC,GACJ,IAAMC,EAAQD,EAAIE,KACdC,EAAW,yCACf,GAAc,KAAXH,EAAIE,KAAU,CAEjBC,EAAW,QACX,IAAI,IAAIC,EAAE,EAAEA,EAAEH,EAAOI,OAAOD,IACnB,IAAJA,IACFD,GAAY,0BAAF,OAA4BF,EAAOG,GAAG,GAAtC,oCACCH,EAAOG,GAAG,GADX,wCAEKH,EAAOG,GAAG,GAFf,oCAGCH,EAAOG,GAAG,GAHX,wCAIKH,EAAOG,GAAG,GAJf,oDAUbD,GAAY,SAEAG,IAAEC,QACfC,UAAU1B,EAAE2B,QACZC,WAAWP,GACXQ,OAAO,EAAKC,S,EAOhBC,cAAc,SAACxB,EAASyB,GAGnBA,EAAMC,GAAG,CACLC,MAAO,EAAKnC,e,mFAOlB,IAAIoC,EAAMX,IAAEY,UAAU,0CAA2C,CAC/DC,YACE,6EAGJC,KAAKR,IAAMN,IAAEM,IAAI,MAAO,CACtBS,OAAQ,CAAC,OAAQ,QACjBC,KAAM,EACNC,OAAQ,CAACN,KAMX,IAAIjC,EAAQsB,IAAEkB,QAAQC,EAAeC,SAAS,CAACC,MAAMP,KAAKjD,SAAS,SAAS,GAAG0C,cAAeO,KAAKP,gBAAgBe,MAAMR,KAAKR,KAI1HiB,EAAW,CACb,GAAMZ,GAGNa,EAAc,CACd,cARiBxB,IAAEkB,QAAQO,EAAsBL,SAAS,CAACC,MAAMP,KAAKjD,SAAS,gBAAgB,KAAKyD,MAAMR,KAAKR,KAS/G,OAAS5B,EACT,MATSsB,IAAEkB,QAAQQ,EAAeN,SAAS,CAACC,MAAMP,KAAKjD,SAAS,QAAQ,GAAI0C,cAAeO,KAAKP,gBAAgBe,MAAMR,KAAKR,KAU3H,QATUN,IAAEkB,QAAQS,EAAkBP,SAAS,CAACC,MAAMP,KAAKjD,SAAS,MAAM,KAAKyD,MAAMR,KAAKR,MAa9FN,IAAE4B,QAAQX,OAAOM,EAAUC,GAAaF,MAAMR,KAAKR,O,6EASjD,OAAO,yBAAKuB,GAAG,Y,GA1IDC,IAAMC,WCOTC,E,iLATX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GANUH,IAAMC,WCOJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,MAAK,SAAAqD,GACjCA,EAAaC,kB","file":"static/js/main.81dc7d5e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport L from \"leaflet\";\r\nimport * as Usoutline from \"./us_outline.json\"\r\nimport * as States from \"./states.json\";\r\nimport * as County from \"./county.json\";\r\nimport * as Congressional from \"./congressional.json\";\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\nclass Map extends React.Component {\r\n\r\n  mapStyle=(mapType,weight)=> {\r\n  \r\n    let mapTypeColor;\r\n    switch(mapType){\r\n\r\n       case \"USA\":\r\n       mapTypeColor=\"#8dd3c7\";\r\n       break;    \r\n       case \"state\":\r\n       mapTypeColor='#7fc97f';\r\n       break;\r\n       case \"county\":\r\n       mapTypeColor='#bebada';\r\n       break;\r\n       case \"congressional\":\r\n       mapTypeColor='#FD8D3C';\r\n       break;\r\n       default :\r\n       mapTypeColor='#FFF';\r\n      \r\n         \r\n      \r\n      \r\n\r\n    }\r\n\r\n    return {\r\n     fillColor: mapTypeColor,\r\n      weight: weight,\r\n      opacity: 1,\r\n      stroke: true,\r\n      color:mapTypeColor,\r\n      dashArray: '2',\r\n      fillOpacity: 0.2\r\n    };\r\n  }\r\n\r\n  whenClicked=(e) =>{\r\n    // e = event\r\n    console.log(\"jkdlfhdsjlhfjds\",e.target.feature)\r\n    let state,county,url;\r\n    state=e.target.feature.properties.STATE;\r\n    if(e.target.feature.properties.COUNTY!==undefined){\r\n      county=e.target.feature.properties.COUNTY;\r\n      \r\n    url=`https://api.census.gov/data/2013/language?get=EST,LAN7,LANLABEL,NAME&for=county:${county}&in=state:${state}&key=c6b213357c951f788c3eb1916c6d718c59b55a8d`\r\n    }else{\r\n\r\n    url=`https://api.census.gov/data/2013/language?get=EST,LAN7,LANLABEL,NAME&for=state:${state}&key=c6b213357c951f788c3eb1916c6d718c59b55a8d`\r\n    \r\n    }\r\n   \r\n    axios.defaults.headers.post['Content-Type'] = 'application/json';\r\n\r\n    axios.get(url)\r\n   \r\n    .then(res => {\r\n      const census= res.data;\r\n      let HtmlRender='<div>No Languages Results Found!</div>'\r\n      if(res.data!==\"\"){\r\n      \r\n      HtmlRender=\"<div>\";\r\n      for(let i=0;i<census.length;i++){\r\n        if(i!==0){\r\n         HtmlRender+=`<ol><li>EST Population:${census[i][0]}</li>\r\n         <li>LAN7:${census[i][1]}</li>\r\n         <li>LANLABEL:${census[i][2]}</li>\r\n         <li>NAME:${census[i][3]}</li>\r\n         <li>LOCATION:${census[i][4]}</li>\r\n         </ol>\r\n         <hr>\r\n         `\r\n        }\r\n      }\r\n      HtmlRender+=\"</div>\"\r\n    }\r\n      let popup = L.popup()\r\n    .setLatLng(e.latlng)\r\n    .setContent(HtmlRender)\r\n    .openOn(this.map);\r\n   \r\n    \r\n  }) \r\n   \r\n  }\r\n  \r\n onEachFeature=(feature, layer)=>{\r\n      //bind click\r\n      \r\n      layer.on({\r\n          click: this.whenClicked\r\n      });\r\n  }\r\n \r\n\r\n  componentDidMount() {\r\n    // create map\r\n    let usmap=L.tileLayer(\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\", {\r\n      attribution:\r\n        '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n    })\r\n\r\n    this.map = L.map(\"map\", {\r\n      center: [39.73, -104.99],\r\n      zoom: 4,\r\n      layers: [usmap]\r\n      \r\n    });\r\n\r\n    // add layer\r\n   \r\n    let county= L.geoJSON(County.default.features,{style:this.mapStyle(\"county\",2),onEachFeature: this.onEachFeature}).addTo(this.map)\r\n    let congressional= L.geoJSON(Congressional.default.features,{style:this.mapStyle(\"congressional\",2)}).addTo(this.map)\r\n    let state= L.geoJSON(States.default.features,{style:this.mapStyle(\"state\",2), onEachFeature: this.onEachFeature}).addTo(this.map)\r\n    let country=L.geoJSON(Usoutline.default.features,{style:this.mapStyle(\"USA\",4)}).addTo(this.map)\r\n    let baseMaps = {\r\n      \"US\": usmap,\r\n  };\r\n  \r\n  let overlayMaps = {\r\n      \"Congressional\":congressional,\r\n      \"County\":county,\r\n      \"State\":state,\r\n      \"Country\": country,\r\n  };\r\n  \r\n  // initialize up the L.control.layers\r\n  L.control.layers(baseMaps, overlayMaps).addTo(this.map);\r\n   \r\n  }\r\n  componentDidUpdate() {\r\n    // check if data has changed\r\n   \r\n  }\r\n  render() {\r\n   \r\n    return <div id=\"map\"/>;\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport Map from './Map';\r\n\r\n\r\nclass App extends React.Component {\r\n  \r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <Map/>\r\n               \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}